import java.io.*;
import java.nio.file.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
    	
        String directoryPath = "C:\\Users\\jbaum\\OneDrive\\Documents\\TESTING 6673\\NewCoverageData"; 
        File folder = new File(directoryPath);
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".txt")); 

        if (files == null || files.length == 0) {
            System.out.println("No files found in the directory.");
            return;
        }
        
        System.out.println("Total number of files in directory: " + files.length);

        Map<String, Integer> failedCounts = new HashMap<>();
        Map<String, Integer> passedCounts = new HashMap<>();
        int totalFailed = 0, totalPassed = 0;

        for (File file : files) {
            processFile(file, failedCounts, passedCounts);
        }

        totalFailed = failedCounts.values().stream().mapToInt(Integer::intValue).sum();
        totalPassed = passedCounts.values().stream().mapToInt(Integer::intValue).sum();

        
        Map<String, Double> suspiciousnessScores = calculateSuspiciousness(failedCounts, passedCounts, totalFailed, totalPassed);

    
        suspiciousnessScores.entrySet().stream()
            .sorted((a, b) -> Double.compare(b.getValue(), a.getValue()))
            .forEach(entry -> System.out.println(entry.getKey() + ": " + entry.getValue()));
    }

    private static void processFile(File file, File[] files, Map<String, Integer> failedCounts, Map<String, Integer> passedCounts) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            boolean isFailingTest = false;

            while ((line = br.readLine()) != null) {
                if (line.contains(" ")) { 
                   
                    String[] parts = line.split(" ");
                    isFailingTest = parts[1].equals("false"); 
                } else {
                 
                    failedCounts.put(line, failedCounts.getOrDefault(line, 0) + (isFailingTest ? 1 : 0));
                    passedCounts.put(line, passedCounts.getOrDefault(line, 0) + (isFailingTest ? 0 : 1));
                }
            }
            
            int filesRead = 0; // Track successfully read files
            
            for (File file1 : files) {
                processFile(file, files, failedCounts, passedCounts);
                filesRead++; // Increment after successfully reading a file
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
        }
        


    private static Map<String, Double> calculateSuspiciousness(Map<String, Integer> failedCounts, Map<String, Integer> passedCounts, int totalFailed, int totalPassed) {
        Map<String, Double> scores = new HashMap<>();
        for (String method : failedCounts.keySet()) {
            int failed = failedCounts.getOrDefault(method, 0);
            int passed = passedCounts.getOrDefault(method, 0);

            double score = 0.0; // Default score if we can't compute it

            if (totalFailed > 0 && totalPassed > 0) { // Prevent division by zero
                double failedRatio = (totalFailed > 0) ? (failed / (double) totalFailed) : 0.0;
                double passedRatio = (totalPassed > 0) ? (passed / (double) totalPassed) : 0.0;

                if (failedRatio + passedRatio > 0) { // Prevent 0/0 case
                    score = failedRatio / (failedRatio + passedRatio);
                    
            scores.put(method, score);
            System.out.println("Total Failed Tests: " + totalFailed);
            System.out.println("Total Passed Tests: " + totalPassed);
                }
            }
    }
		return scores;
}
    }


